#include <iostream>

const size_t ARRAY_SIZE = 10;

void readArray(char* arr, size_t length)
{
    for(size_t i = 0; i < length; i++)
    {
        std::cin >> arr[i];
    }
}

void printArray(char* arr, size_t length)
{
    for(size_t i = 0; i < length; i++)
    {
        std::cout << arr[i];
    }
    std::cout << std::endl;
}

int power(int base,int exponential)
{
    int result = 0;
    for (int i = 0; i < exponential; i++)
    {
        result *= base;
    }

    return result;
}

int charToNum(char symbol)
{
    if ('0' <= symbol && symbol <= '9')
    {
        return symbol - '0';
    }
    else if ('A' <= symbol && symbol <= 'Z')
    {
        return symbol - 'A' + 10;
    }
    else if ('a' <= symbol && symbol <= 'z')
    {
        return symbol - 'a' + 10;
    }
    else
        return -1;
}

char numToChar(int number)
{
    if (0 <= number && number <= 9)
    {
        return number + '0';
    }
    else if (charToNum('A') <= number && number <= charToNum('Z'))
    {
        return number + 'A' - charToNum('A');
    }
    else if (charToNum('a') <= number && number <= charToNum('z'))
    {
        return number + 'a' - charToNum('a');
    }
    else
    {
        return '\0';
    }
}

// 1
void incrementOnce(char* arr, size_t length, int k)
{
    for(int i = length - 1; i >= 0; i--)
    {
       if (arr[i] == numToChar(k - 1))
       {
            arr[i] = '0';
       } 
       else 
       {
            // arr[i] = numToChar(charToNum(arr[i]) + 1);
            if (arr[i] == '9')
            {
                arr[i] = 'A';
            }
            else
            {
                arr[i] += 1;
            }
       }
    }
}

// 2
void decrementOnce(char* arr, size_t length, int k)
{
    for(int i = length - 1; i >= 0; i--)
    {
       if (arr[i] == '0')
       {
            arr[i] = numToChar(k - 1);
       } 
       else 
       {
            // arr[i] = numToChar(charToNum(arr[i]) + 1);
            if (arr[i] == 'A')
            {
                arr[i] = '9';
            }
            else
            {
                arr[i] -= 1;
            }
       }
    }
}  

// 3
void addSecondToFirst(char* arr1, char* arr2, size_t length, int k, char* res)
{
    int sum = 0;
    int transfer = 0;

    for(int i = length - 1; i >= 0; i--)
    {
        sum = charToNum(arr1[i]) + charToNum(arr2[i]) + transfer;
        transfer = sum / k;
        res[i] = numToChar(sum % k);
    }
}

// 4
bool isPalindrome(unsigned int number, int k)
{
    char arr[ARRAY_SIZE];
    size_t length = 0;

    for (int i = 0; number > 0; i++)
    {
        arr[i] = numToChar(number % k);
        number /= k;
        length++;
    }

    bool isPalindrome = true;

    for (size_t i = 0; i < length / 2; i++)
    {
        if (arr[i] != arr[length - 1 - i])
        {
            isPalindrome = false;
        }
    }

    return isPalindrome;
}

// 5
int convertToDecimal(const char* const arr, size_t length, int base)
{
    int value = 0;
    
    for(int i = length - 1, mult = 1; i >= 0; i--, mult *= base)
    {
        int digit = charToNum(arr[i]);

        value += mult * digit;
    }
    
    return value;
}



bool areNumsEqual(const char* const arr1, const char* const arr2,size_t length1, size_t length2, int k, int n)
{
    int number1 = convertToDecimal(arr1, length1, k);
    int number2 = convertToDecimal(arr2, length2, n);

    return number1 == number2;
}

void reverseArray(char* arr, int length)
{
    for(int i = 0; i < length / 2 + 1; i++)
    {
        arr[i] = arr[length - i - 1];
    }
}

int decToNumSys(int number, int k, char* res)
{
    int length = 0;
    
    while(number)
    {
        res[length] = numToChar(number % k);
        number /= k;
        length++;
    }

    reverseArray(res, length);

    return length;
}

int main()
{
    // 1
    // char arr[ARRAY_SIZE];
    // size_t length = 0;
    // std::cin >> length;
    // int k = 0;
    // readArray(arr, length);
    // std::cin >> k;
    // incrementOnce(arr, length, k);
    // for(size_t i = 0; i < length; i++)
    // {
    //     std::cout << arr[i];
    // }

    // 2
    //     char arr[ARRAY_SIZE];
    // size_t length = 0;
    // std::cin >> length;
    // int k = 0;
    // readArray(arr, length);
    // std::cin >> k;
    // decrementOnce(arr, length, k);
    // for(size_t i = 0; i < length; i++)
    // {
    //     std::cout << arr[i];
    // }

    // 3
    // char arr1[ARRAY_SIZE];
    // char arr2[ARRAY_SIZE];
    // char res[ARRAY_SIZE];
    // size_t length = 0;
    // std::cin >> length;
    // int k = 0;
    // readArray(arr1, length);
    // readArray(arr2, length);
    // std::cin >> k;
    // addSecondToFirst(arr1, arr2, length, k, res);
    // for(size_t i = 0; i < length; i++)
    // {
    //     std::cout << res[i];
    // }

    // 4 
    // unsigned int number = 0; 
    // int k = 0;
    // std::cin >> number >> k;
    // bool isTrue = isPalindrome(number, k);
    // std::cout << (isTrue ? "true" : "false") << std::endl;

    // 5
    // char arr1[ARRAY_SIZE];
    // char arr2[ARRAY_SIZE];
    // size_t length1 = 0;
    // size_t length2 = 0;
    // int k, n;
    // std::cin >> length1;
    // readArray(arr1,length1);
    // std::cin >> k;
    // std::cin >> length2;
    // readArray(arr2, length2);
    // std::cin >> n;
    // bool areEqual = areNumsEqual(arr1, arr2, length1, length2, k, n);
    // std::cout << (areEqual ? "true" : "false") << std::endl;

    return 0;
}
