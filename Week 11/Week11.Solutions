#include <iostream>

const size_t SIZE = 10;

void readArray(int* arr, size_t n)
{
    for (size_t i = 0; i < n; i++)
    {
        std::cin >> arr[i];
    }
}

void printArray(int* arr, size_t n)
{
    for (size_t i = 0; i < n; i++)
    {
        std::cout << arr[i];
    }
}

void swap(int& a, int& b)
{
    int temp = a;
    a = b;
    b = temp;
} // ne ni trqbwa

int* reverseArr(int* arr, size_t n)
{
    int* result = new int[n];
    for (size_t i = 0; i < n; i++)
    {
        result[i] = arr[n - i - 1];
    }

    return result;
}

int* filterDivisible(const int* arr1, const int* arr2, size_t size1, size_t size2, int k, size_t& size)
{
    size_t counter1 = 0;
    for (size_t i = 0; i < size1; i++)
    {
        if (arr1[i] % k == 0)
        {
            counter1++;
        }
    }

    size_t counter2 = 0;
    for (size_t i = 0; i < size2; i++)
    {
        if (arr2[i] % k == 0)
        {
            counter2++;
        }
    }

    size = counter1 + counter2;
    int* result = new int[size];

    size_t ind = 0;
    for (size_t i = 0; i < size1; i++)
    {
        if (arr1[i] % k == 0)
        {
            result[ind] = arr1[i];
            ind++;
        }
    }

    return result;
}

int main()
{
    const size_t n = 5;
    int arr[n] = { 1, 2, 3, 4, 5 };
    int* dynamicArr = reverseArr(arr, n);
    printArray(dynamicArr, n);
    delete[] dynamicArr;
}

    
